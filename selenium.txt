mirrors:
	http://npm.taobao.org/mirrors/selenium
	http://npm.taobao.org/mirrors/geckodriver
	http://npm.taobao.org/mirrors/chromedriver


css定位：
用#表示id
用.表示class

xpath定位：
dr.find_element_by_xpath("//input[@id='kw' and @name='wd']").send_keys("selenium")

//form[@id='form']/span/input




# -*- coding:utf-8 -*-
import os
import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

"""
练习启动各种浏览器：Firefox， Chrome， IE
练习启动各种浏览器的同时加载插件：Firefox， Chrome， IE
"""

def startFirefox():
    """启动安装在默认位置的Firefox浏览器，并自动转到 百度 首页"""
    driver = webdriver.Firefox()
    driver.get("http://www.baidu.com")
    assert("百度" in driver.title)
    elem = driver.find_element_by_name("wd")
    elem.send_keys("selenium")
    elem.send_keys(Keys.RETURN)
    assert "百度" in driver.title
    driver.close()
    driver.quit()
    driver = None
    
def startFirefoxWithSpecificLocation():
    """启动安装在 非 默认位置的Firefox浏览器，并自动转到 百度 首页"""
    firefoxBin = os.path.abspath(r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe")
    os.environ["webdriver.firefox.bin"] = firefoxBin
    
    driver = webdriver.Firefox()
    driver.get("http://www.baidu.com")
    assert("百度" in driver.title)
    elem = driver.find_element_by_name("wd")
    elem.send_keys("selenium")
    elem.send_keys(Keys.RETURN)
    assert "百度" in driver.title
    driver.close()
    driver.quit()
    driver = None

    
def startChrome():
    """启动Chrome浏览器，并自动转到 百度 首页
    启动Chrome浏览器需要指定驱动的位置
    """
    chrome_driver = os.path.abspath(r"D:\云盘\360云\360云盘\我的自动双向同步文件夹\01-PersonalInfo\DataGuru\12-软件自动化测试Selenium2\1-课程\练习代码_Python版本\Selenium_python\Files\chromedriver.exe")
    os.environ["webdriver.chrome.driver"] = chrome_driver
    
    driver = webdriver.Chrome(chrome_driver)
    driver.get("http://www.baidu.com")
    assert("百度" in driver.title)
    elem = driver.find_element_by_name("wd")
    elem.send_keys("selenium")
    elem.send_keys(Keys.RETURN)
    assert "百度" in driver.title
    driver.close()
    driver.quit()
    driver = None

def startIE():
    """启动IE浏览器，并自动转到 百度 首页
    启动 IE 浏览器需要指定驱动的位置
    """
    ie_driver = os.path.abspath(r"D:\云盘\360云\360云盘\我的自动双向同步文件夹\01-PersonalInfo\DataGuru\12-软件自动化测试Selenium2\1-课程\练习代码_Python版本\Selenium_python\Files\IEDriverServer.exe")
    os.environ["webdriver.ie.driver"] = ie_driver
    
    driver = webdriver.Ie(ie_driver)
    driver.get("http://www.python.org")
    assert("Python" in driver.title)
    elem = driver.find_element_by_id("id-search-field")
    elem.send_keys("selenium")
    '''
    elem.send_keys(Keys.RETURN)
    assert "百度" in driver.title
    driver.close()
    driver.quit()
    driver = None    
    ''' 
    

def start_firefox_with_firebug_plug():
    """启动Firefox，并自动加载插件Firebug"""
    firefoxBin = os.path.abspath(r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe")
    os.environ["webdriver.firefox.bin"] = firefoxBin
    
    firefoxProfile = webdriver.FirefoxProfile()
    tempDir = os.getcwd()
    tempDir = os.path.split(tempDir)[0]
    firebugPlugFile = os.path.join(os.path.join(tempDir,"Files"), "firebug-2.0.7.xpi")    
    firefoxProfile.add_extension(firebugPlugFile)
    firefoxProfile.set_preference("extensions.firebug.currentVersion", "2.0.7")
    
    driver = webdriver.Firefox(firefox_profile=firefoxProfile)
    driver.get("http://www.baidu.com")

def start_chrome_with_chrometomobile_plug():
    """启动Chrome，并自动加载插件Chrome to Mobile"""
    tempDir = os.getcwd()
    tempDir = os.path.split(tempDir)[0]
    chrome_driver_file = os.path.join(os.path.join(tempDir,"Files"), "chromedriver.exe")        
    os.environ["webdriver.chrome.driver"] = chrome_driver_file
    
    chrome_to_mobile_plug_file =  os.path.join(os.path.join(tempDir,"Files"), "Chrome-to-Mobile_v3.3.crx")
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_extension(chrome_to_mobile_plug_file)
    driver = webdriver.Chrome(executable_path=chrome_driver_file, 
                             chrome_options=chrome_options)
    driver.get("http://www.baidu.com")
    '''
    driver.close()
    driver.quit()
    driver = None
    '''

def start_firefox_with_default_settings():
    """启动Firefox浏览器， 使用本地配置文件中的选项配置浏览器
    自动将页面载入过程导出为Har文件，并存放在
    配置项 extensions.firebug.netexport.defaultLogDir指定的D:\temp\selenium2目录下    
    """
    firefox_bin = os.path.abspath(r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe")
    os.environ["webdriver.firefox.bin"] = firefox_bin
    
    # 使用从别的机器上拷贝来的浏览器配置
    profile = webdriver.FirefoxProfile(os.path.abspath(r"D:\Temp\selenium2\Profiles\mm9zxom8.default"))
    # 使用本地的默认配置
    #firefox_profile = webdriver.FirefoxProfile(r"C:\Users\eli\AppData\Roaming\Mozilla\Firefox\Profiles\mm9zxom8.default")
    driver = webdriver.Firefox(firefox_profile=profile)
    driver.get("http://www.baidu.com")
    driver.get("http://www.baidu.com")
    '''
    driver.close()
    driver.quit()
    driver = None
    '''

def start_chrome_with_default_settings():
    """启动Firefox浏览器， 使用本地配置文件中的选项配置浏览器"""
    tempDir = os.getcwd()
    tempDir = os.path.split(tempDir)[0]
    chrome_driver = chrome_driver_file = os.path.join(os.path.join(tempDir,"Files"), "chromedriver.exe")        
    os.environ["webdriver.chrome.driver"] = chrome_driver
    
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument("--test-type")
    #chrome_options.add_argument("user-data-dir="+os.path.abspath(r"D:\Temp\selenium2\User Data"))
    chrome_options.add_argument("user-data-dir="+os.path.abspath(r"C:\Users\eli\AppData\Local\Google\Chrome\User Data"))
    driver = webdriver.Chrome(executable_path=chrome_driver, 
                             chrome_options=chrome_options)
    driver.get("http://www.baidu.com")
    
    
if __name__ == "__main__":  
    # 2.启动浏览器时自动加载插件， 如Firefox -> Firebug ; Chrome -> Chrome to Mobile
    # start_firefox_with_firebug_plug()
    # start_chrome_with_chrometomobile_plug()
    # start_firefox_with_default_settings()
    start_chrome_with_default_settings()
    
    
    # 1.启动各种浏览器
    #startFirefox()
    #startFirefoxWithSpecificLocation()
    #startChrome()
    #startIE()    
	
	
-------------------------------------------------------------
我们有时会需要使用发送键盘按键的方法来进行一些操作。一些可见的正常的文本可以直接send_keys()发送，但是有一些功能键就需要其他的方法。

selenium就为我们提供了一个Keys类，其中提供了很多常用的不可见的特殊按键。

from selenium.webdriver.common.keys import Keys

    BACKSPACE（或者BACK_SPACE） ——退格、删除键

    TAB ——有时可用来切换input框的焦点

    ENTER ——回车键，有时可用来代替点击提交按钮

    SHIFT（或LEFT_SHIFT） ——和其他按键同时发送，可发送大写字母或特殊符号

    CONTROL（或LEFT_CONTROL） ——和其他按键同时发送可实现一些功能如‘CONTROL+A’、‘CONTROL+C’、‘CONTROL+X’、‘CONTROL+V’等等

    ALT（或LEFT_ALT） ——和其他键一起使用

    SPACE ——输入空格，或选中checkbox、radio框

    PAGE_UP/PAGE_DOWN ——通过按键可上下翻页

    F1~F12 ——功能键

CONTROL可以和其他键合用，实现复制、剪切等功能
SPACE可用来选中check box或者radio button


-------------------------------------------------------------------




-------------------------------------------------------------------
用 selenium做自动化，有时候会遇到需要模拟鼠标操作才能进行的情况，比如单击、双击、点击鼠标右键、拖拽等等。而selenium给我们提供了一个类来处理这类事件——ActionChains：

from selenium.webdriver.common.action_chains import ActionChains

这个类基本能够满足我们所有对鼠标操作的需求。

1.ActionChains基本用法

首先需要了解ActionChains的执行原理，当你调用ActionChains的方法时，不会立即执行，而是会将所有的操作按顺序存放在一个队列里，当你调用perform()方法时，队列中的时间会依次执行。

这种情况下我们可以有两种调用方法：

    链式写法:
	menu = driver.find_element_by_css_selector(".nav")
	hidden_submenu =    driver.find_element_by_css_selector(".nav #submenu1")

	ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()

    分步写法:
	menu = driver.find_element_by_css_selector(".nav")
	hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")

	actions = ActionChains(driver)
	actions.move_to_element(menu)
	actions.click(hidden_submenu)
	actions.perform()

    两种写法本质是一样的，ActionChains都会按照顺序执行所有的操作。

2.ActionChains方法列表

    click(on_element=None) ——单击鼠标左键

    click_and_hold(on_element=None) ——点击鼠标左键，不松开

    context_click(on_element=None) ——点击鼠标右键

    double_click(on_element=None) ——双击鼠标左键

    drag_and_drop(source, target) ——拖拽到某个元素然后松开

    drag_and_drop_by_offset(source, xoffset, yoffset) ——拖拽到某个坐标然后松开

    key_down(value, element=None) ——按下某个键盘上的键

    key_up(value, element=None) ——松开某个键

    move_by_offset(xoffset, yoffset) ——鼠标从当前位置移动到某个坐标

    move_to_element(to_element) ——鼠标移动到某个元素

    move_to_element_with_offset(to_element, xoffset, yoffset) ——移动到距某个元素（左上角坐标）多少距离的位置

    perform() ——执行链中的所有动作

    release(on_element=None) ——在某个元素位置松开鼠标左键

    send_keys(*keys_to_send) ——发送某个键到当前焦点的元素

    send_keys_to_element(element, *keys_to_send) ——发送某个键到指定元素




